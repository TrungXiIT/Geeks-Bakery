// <auto-generated />
using System;
using GeeksBakery.Data.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GeeksBakery.Data.Migrations
{
    [DbContext(typeof(GeeksBakeryDbContext))]
    [Migration("20210705125324_AddCakeImageTable")]
    partial class AddCakeImageTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("GeeksBakery.Data.Entities.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8d04dce2-969a-435d-bba4-df3f325983dc"),
                            ConcurrencyStamp = "7972345a-8823-41fc-aab1-35450c41b14f",
                            Description = "Administrator role",
                            Name = "admin",
                            NormalizedName = "admin"
                        },
                        new
                        {
                            Id = new Guid("54ba416f-6b89-4c53-873d-4fbd48506e6d"),
                            ConcurrencyStamp = "256bcbfa-47e3-423d-94f4-8e42b9c2fd90",
                            Description = "Customer role",
                            Name = "customer",
                            NormalizedName = "customer"
                        });
                });

            modelBuilder.Entity("GeeksBakery.Data.Entities.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Avatar")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("default-avatar.png");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DoB")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "35cac859-f5f9-46fe-8fb2-06295ee87cb2",
                            DoB = new DateTime(2000, 2, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "trung@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Pham Chi Trung",
                            NormalizedEmail = "trung@gmail.com",
                            NormalizedUserName = "admin",
                            PasswordHash = "AQAAAAEAACcQAAAAEGqJBwhd8AfBuQ1JtOKjd8uGnT8RZMo7EQwhMpwXKMOS9qVyry+gjqA6W0GAalJN/g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = new Guid("bff91064-dc92-421e-a233-d1080f630928"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b46d6535-a0a0-4bda-ac31-13c3f5fb7011",
                            DoB = new DateTime(2000, 2, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "customer1@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Pham Chi Trung Customer",
                            NormalizedEmail = "customer1@gmail.com",
                            NormalizedUserName = "customer",
                            PasswordHash = "AQAAAAEAACcQAAAAEGZXFZK0jf2uQCrecRFdpTGFc/+jIvmrRU/h071zzkEE4V1Y93eg5+IB1CmiF3X9+A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "customer 1"
                        },
                        new
                        {
                            Id = new Guid("bff91054-dc92-421e-a233-d1080f630928"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "85d7bc04-cc23-46fd-9731-4e02c3c9d169",
                            DoB = new DateTime(1996, 2, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "customer2@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "David",
                            NormalizedEmail = "customer2@gmail.com",
                            NormalizedUserName = "customer",
                            PasswordHash = "AQAAAAEAACcQAAAAECpkM4rIPPWcKkE7fuGpri0u0v5BZJf6FmEQN6lX2kOIwWlqRFCyP1BytiOssp7AKA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "customer 2"
                        });
                });

            modelBuilder.Entity("GeeksBakery.Data.Entities.Cake", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("OriginalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SEOAlias")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.Property<int?>("Stock")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Cakes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 3,
                            Description = "Blueberry, Kem cheese, Kem tươi.",
                            Name = "Blue bery mousse",
                            OriginalPrice = 300000m,
                            Price = 300000m,
                            Size = 19
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 3,
                            Description = "Caramel, Socola",
                            Name = "Caramel mousse",
                            OriginalPrice = 250000m,
                            Price = 250000m,
                            Size = 21
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 3,
                            Description = "Cherry, Kem cheese ,Kem tươi.",
                            Name = "Cherry cheese mousse",
                            OriginalPrice = 150000m,
                            Price = 150000m,
                            Size = 20
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 3,
                            Description = "Kem tươi, Socola,Trà xanh.",
                            Name = "Red chocolate mousse",
                            OriginalPrice = 200000m,
                            Price = 200000m,
                            Size = 19
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 1,
                            Description = "Gato, kem bơ vị rượu rum, socola.",
                            Name = "Dark chocolate cake",
                            OriginalPrice = 150000m,
                            Price = 150000m,
                            Size = 20
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 1,
                            Description = "Gato, kem bơ vị rượu rum, socola bào trắng, dừa sấy.",
                            Name = "White chocolate and coconut cake",
                            OriginalPrice = 300000m,
                            Price = 300000m,
                            Size = 19
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 2,
                            Description = "Gato, kem, có phụ kiện trên mặt bánh",
                            Name = "Car dollar cake",
                            OriginalPrice = 290000m,
                            Price = 290000m,
                            Size = 21
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 2,
                            Description = "Gato, kem vị trà xanh.",
                            Name = "Green tea four love",
                            OriginalPrice = 170000m,
                            Price = 170000m,
                            Size = 20
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 4,
                            Description = "Gato, kem tươi vị coffee",
                            Name = "Tiramisu",
                            OriginalPrice = 160000m,
                            Price = 160000m,
                            Size = 21
                        });
                });

            modelBuilder.Entity("GeeksBakery.Data.Entities.Cart", b =>
                {
                    b.Property<int>("CakeId")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.HasKey("CakeId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("GeeksBakery.Data.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Bread"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Mousse"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Cookies"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Donuts"
                        });
                });

            modelBuilder.Entity("GeeksBakery.Data.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DeliveryDate = new DateTime(2021, 5, 21, 12, 45, 0, 0, DateTimeKind.Unspecified),
                            Status = 4,
                            UserId = new Guid("bff91064-dc92-421e-a233-d1080f630928")
                        },
                        new
                        {
                            Id = 2,
                            DeliveryDate = new DateTime(2021, 5, 22, 10, 50, 0, 0, DateTimeKind.Unspecified),
                            Status = 4,
                            UserId = new Guid("bff91064-dc92-421e-a233-d1080f630928")
                        },
                        new
                        {
                            Id = 3,
                            DeliveryDate = new DateTime(2021, 5, 23, 9, 34, 0, 0, DateTimeKind.Unspecified),
                            Status = 4,
                            UserId = new Guid("bff91064-dc92-421e-a233-d1080f630928")
                        },
                        new
                        {
                            Id = 4,
                            DeliveryDate = new DateTime(2021, 5, 23, 16, 23, 0, 0, DateTimeKind.Unspecified),
                            Status = 4,
                            UserId = new Guid("bff91054-dc92-421e-a233-d1080f630928")
                        },
                        new
                        {
                            Id = 5,
                            DeliveryDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 2,
                            UserId = new Guid("bff91064-dc92-421e-a233-d1080f630928")
                        },
                        new
                        {
                            Id = 6,
                            DeliveryDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0,
                            UserId = new Guid("bff91054-dc92-421e-a233-d1080f630928")
                        });
                });

            modelBuilder.Entity("GeeksBakery.Data.Entities.OrderDetail", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("CakeId")
                        .HasColumnType("int");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.HasKey("OrderId", "CakeId");

                    b.HasIndex("CakeId");

                    b.ToTable("OrderDetails");

                    b.HasData(
                        new
                        {
                            OrderId = 1,
                            CakeId = 1,
                            Amount = 2
                        },
                        new
                        {
                            OrderId = 2,
                            CakeId = 2,
                            Amount = 1
                        },
                        new
                        {
                            OrderId = 3,
                            CakeId = 3,
                            Amount = 1
                        },
                        new
                        {
                            OrderId = 3,
                            CakeId = 1,
                            Amount = 2
                        },
                        new
                        {
                            OrderId = 4,
                            CakeId = 1,
                            Amount = 1
                        },
                        new
                        {
                            OrderId = 5,
                            CakeId = 3,
                            Amount = 1
                        },
                        new
                        {
                            OrderId = 5,
                            CakeId = 2,
                            Amount = 1
                        },
                        new
                        {
                            OrderId = 6,
                            CakeId = 4,
                            Amount = 1
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("AppRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("AppUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("AppUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("AppUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de"),
                            RoleId = new Guid("8d04dce2-969a-435d-bba4-df3f325983dc")
                        },
                        new
                        {
                            UserId = new Guid("bff91064-dc92-421e-a233-d1080f630928"),
                            RoleId = new Guid("54ba416f-6b89-4c53-873d-4fbd48506e6d")
                        },
                        new
                        {
                            UserId = new Guid("bff91054-dc92-421e-a233-d1080f630928"),
                            RoleId = new Guid("54ba416f-6b89-4c53-873d-4fbd48506e6d")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("AppUserTokens");
                });

            modelBuilder.Entity("GeeksBakery.Data.Entities.Cake", b =>
                {
                    b.HasOne("GeeksBakery.Data.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("GeeksBakery.Data.Entities.Cart", b =>
                {
                    b.HasOne("GeeksBakery.Data.Entities.Cake", "Cake")
                        .WithMany()
                        .HasForeignKey("CakeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GeeksBakery.Data.Entities.AppUser", "User")
                        .WithMany("Carts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cake");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GeeksBakery.Data.Entities.Order", b =>
                {
                    b.HasOne("GeeksBakery.Data.Entities.AppUser", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GeeksBakery.Data.Entities.OrderDetail", b =>
                {
                    b.HasOne("GeeksBakery.Data.Entities.Cake", "Cake")
                        .WithMany()
                        .HasForeignKey("CakeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GeeksBakery.Data.Entities.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cake");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("GeeksBakery.Data.Entities.AppUser", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("GeeksBakery.Data.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
